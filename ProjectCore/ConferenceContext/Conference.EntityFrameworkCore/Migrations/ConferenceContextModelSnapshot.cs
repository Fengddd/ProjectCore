// <auto-generated />
using System;
using Conference.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Conference.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(ConferenceContext))]
    partial class ConferenceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Conference.Common.Log.MonitorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName");

                    b.Property<string>("AddressIp");

                    b.Property<string>("ControllerName");

                    b.Property<string>("ErrorMsg");

                    b.Property<DateTime>("ExecuteEndTime");

                    b.Property<DateTime>("ExecuteStartTime");

                    b.Property<long>("ExecutionTime");

                    b.Property<int>("LogLevel");

                    b.Property<int>("LogType");

                    b.Property<Guid>("MonitorLogId");

                    b.Property<string>("RequestParameters");

                    b.Property<Guid>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ControllerName", "ActionName", "ExecuteStartTime", "ExecuteEndTime");

                    b.ToTable("MonitorLogInfo");
                });

            modelBuilder.Entity("Conference.Domain.Entity.ConferenceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConferenceAddress");

                    b.Property<string>("ConferenceContent");

                    b.Property<DateTime>("ConferenceEndTime");

                    b.Property<string>("ConferenceName");

                    b.Property<int>("ConferenceParticipantNum");

                    b.Property<bool>("ConferencePublishStatus");

                    b.Property<DateTime>("ConferenceStartTime");

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("CustomerId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("ConferenceInfo");
                });

            modelBuilder.Entity("Conference.Domain.Entity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CustomerAge");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerPhone");

                    b.HasKey("Id");

                    b.ToTable("CustomerInfo");
                });

            modelBuilder.Entity("Conference.Domain.Entity.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SeatNumber");

                    b.Property<Guid>("SeatTypeId");

                    b.HasKey("Id");

                    b.HasIndex("SeatTypeId");

                    b.ToTable("SeatInfo");
                });

            modelBuilder.Entity("Conference.Domain.Entity.SeatType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ConferenceId");

                    b.Property<string>("SeatTypeName");

                    b.Property<int>("SeatTypeNum");

                    b.Property<decimal>("SeatTypePrice");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("SeatTypeInfo");
                });

            modelBuilder.Entity("Conference.Domain.EventStorage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AggregateRootId");

                    b.Property<string>("AggregateRootType");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("EventData");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("AggregateRootId", "AggregateRootType");

                    b.ToTable("EventStorageInfo");
                });

            modelBuilder.Entity("Conference.Domain.Entity.Customer", b =>
                {
                    b.OwnsOne("Conference.Domain.ValueObject.Address", "CustomerAddress", b1 =>
                        {


                            b1.Property<string>("AddressDetails");

                            b1.Property<string>("City");

                            b1.Property<string>("County");

                            b1.Property<string>("Province");


                        });
                });

            modelBuilder.Entity("Conference.Domain.Entity.Seat", b =>
                {
                    b.HasOne("Conference.Domain.Entity.SeatType", "SeatTypeInfo")
                        .WithMany("SeatList")
                        .HasForeignKey("SeatTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conference.Domain.Entity.SeatType", b =>
                {
                    b.HasOne("Conference.Domain.Entity.ConferenceInfo", "ConferenceInfo")
                        .WithMany("SeatTypeList")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
